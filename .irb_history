include UserAuth::TokenCommons
encrypt = UserAuth::TokenCommons.encrypt_for(1)
encrypt
decrypt = UserAuth::TokenCommons.decrypt_for(encrypt)
decrypt
Hirb::disable = true
Hirb::disable
exit
user = User.first
Hirb::disable
user = User.first
user
user.remember("a")
user
user.remember("a")
user.reload!
user.remember("a")
user = User.first
user
user.remember("a")
exit
user = User.first
user
user.remember("a")
user
exit
user = User.first
user
user.remember("a")
user
user.forget
user
user.remember("a")
user.forget
user
token = UserAuth
token = UserAuth::RefreshToken.new(user_id:user.id)
user
user.id
token1 = UserAuth::RefreshToken.new(user_id: user.id)
exit
user = User.first
user
token1 = UserAuth::RefreshToken.new(user_id: user.id)
exit
token1 = UserAuth::RefreshToken.new(user_id: user.id)
user = User.first
token1 = UserAuth::RefreshToken.new(user_id: user.id)
token1
token1.payload[:jti]
user.refresh_jti
user
token1 = UserAuth::RefreshToken.new(user_id: user.id)
user
user.reload!
user
user.reload
token1.token == user.refresh_jti?
user.refresh_jti
token1.token
token1.token[:payload]
token1.payload
token1.payload[:jwt]
token1.payload[:jti]
token1.payload[:jti] == user.refresh_jti
exit
UserAuth::RefreshToken.new(user_id:user.id)
user = User.first
user
UserAuth::RefreshToken.new(user_id:user.id)
token
token1
token1 + UserAuth::RefreshToken.new(user_id:user.id)
token1 = UserAuth::RefreshToken.new(user_id:user.id)
token1.payload
token1.payload
token1.payload[:jti]
token1.payload[:jti] == user.refresh_jti
user.refresh_jti
token1.payload[:jti]
toekn1
token1
user.reload
token1.payload[:jti] == user.refresh_jti
token1.entity_for_user
user
UserAuth::AccessToken.new(user_id:user.id)
token = UserAuth::AccessToken.new(user_id:user.id)
token
token.token
user2 = UserAuth::AccessToken.new(token)
user2
token2 = UserAuth::AccessToken.new(token:token)
token2
token2 = UserAuth::AccessToken.new(token:token.token)
token2
token2.entity_for_user
token2 = UserAuth::AccessToken.new(token:token.token,payload:{lifetime:1.hour})
token2
token2.payload[:exp]
token2.payload
token2.payload["exp"]
Time.at(token2.payload["exp"])
token2.reload
token3 = UserAuth::AccessToken.new(user_id:user.id,payload:{lifetime:1.hours})
token3.lifetime_text
token4 = UserAuth::AccessToken.new(token:token.token,options:{sub:"1"})
sub = token.payload[:sub]
token5 = UserAuth::AccessToken.new(token:token.token,options:{sub: sub})
token5
token5.entity_for_user
exit
